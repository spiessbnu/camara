# -*- coding: utf-8 -*-
"""API Camara.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aRnIMSXPfJnabCYcf72UkcrkXjTJGPy3
"""

import requests
import json
import pandas as pd
import time
from datetime import datetime
from IPython.display import display, HTML # Importa display e HTML

# URL base da API de Dados Abertos da C√¢mara dos Deputados
URL_BASE = "https://dadosabertos.camara.leg.br/api/v2"

# Lista fixa com as siglas de todos os estados brasileiros e o Distrito Federal
SIGLAS_ESTADOS = [
    "AC", "AL", "AP", "AM", "BA", "CE", "DF", "ES", "GO", "MA", "MT", "MS",
    "MG", "PA", "PB", "PR", "PE", "PI", "RJ", "RN", "RS", "RO", "RR", "SC",
    "SP", "SE", "TO"
]

def obter_deputados_por_estado_robusto(sigla_uf):
    """
    Obt√©m a lista de deputados para uma UF, retornando um status de sucesso.
    Retorna: (True, lista_de_deputados) em caso de sucesso.
             (False, None) em caso de falha de conex√£o.
    """
    todos_deputados = []
    pagina = 1
    while True:
        url = f"{URL_BASE}/deputados?siglaUf={sigla_uf}&itens=100&pagina={pagina}"
        try:
            # Timeout define um limite de tempo para a resposta do servidor
            response = requests.get(url, timeout=20)
            response.raise_for_status() # Lan√ßa exce√ß√£o para erros HTTP (4xx, 5xx)
            dados = response.json()

            if not dados["dados"]:
                break

            todos_deputados.extend(dados["dados"])

            existe_proxima_pagina = any(link['rel'] == 'next' for link in dados.get('links', []))
            if not existe_proxima_pagina:
                break

            pagina += 1

        except requests.exceptions.RequestException as e:
            # Em caso de qualquer erro de requisi√ß√£o (conex√£o, timeout, etc.)
            print(f"üö® FALHA ao buscar dados para '{sigla_uf}'. Erro: {e}")
            return (False, None) # Sinaliza a falha

    # Se o loop terminar sem exce√ß√µes, a opera√ß√£o foi um sucesso
    return (True, todos_deputados)


def obter_detalhes_deputado(id_deputado):
    """
    Obt√©m os detalhes de um deputado espec√≠fico a partir do seu ID.
    """
    url = f"{URL_BASE}/deputados/{id_deputado}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Erro ao buscar detalhes do deputado ID {id_deputado}: {e}")
        return None

def obter_profissoes_deputado(id_deputado):
    """
    Obt√©m as profiss√µes declaradas de um deputado espec√≠fico.
    """
    url = f"{URL_BASE}/deputados/{id_deputado}/profissoes"

    # Adicionando o header
    headers = {'Accept': 'application/json'}

    try:
        # Passando o header na requisi√ß√£o
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Erro ao buscar profiss√µes do deputado ID {id_deputado}: {e}")
        return None

def obter_ocupacoes_deputado(id_deputado):
    """
    Obt√©m as ocupa√ß√µes e atividades de um deputado espec√≠fico.
    """
    url = f"{URL_BASE}/deputados/{id_deputado}/ocupacoes"
    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Erro ao buscar ocupa√ß√µes do deputado ID {id_deputado}: {e}")
        return None

def obter_mandatos_externos_deputado(id_deputado):
    """
    Obt√©m outros cargos eletivos j√° exercidos por um deputado espec√≠fico.
    """
    url = f"{URL_BASE}/deputados/{id_deputado}/mandatosExternos"
    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Erro ao buscar mandatos externos do deputado ID {id_deputado}: {e}")
        return None

'''
def obter_detalhes_frente_parlamentar(id_frente):
    """
    Obt√©m informa√ß√µes detalhadas sobre uma frente parlamentar espec√≠fica.
    """
    url = f"{URL_BASE}/frentes/{id_frente}"
    try:
        response = requests.get(url, timeout=15)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Erro ao buscar detalhes da frente parlamentar ID {id_frente}: {e}")
        return None

def obter_frentes_parlamentares_deputado(id_deputado):
    """
    Obt√©m as frentes parlamentares de um deputado, incluindo detalhes completos de cada uma.
    Aten√ß√£o: esta fun√ß√£o pode ser lenta, pois realiza m√∫ltiplas requisi√ß√µes √† API.
    """
    url_frentes_basicas = f"{URL_BASE}/deputados/{id_deputado}/frentes"
    frentes_detalhadas = []

    try:
        # Primeira requisi√ß√£o: obt√©m a lista de frentes do deputado
        response = requests.get(url_frentes_basicas, timeout=15)
        response.raise_for_status()
        dados_frentes_basicas = response.json()

        if dados_frentes_basicas and 'dados' in dados_frentes_basicas:
            # Para cada frente na lista, busca os detalhes
            for resumo_frente in dados_frentes_basicas['dados']:
                id_frente = resumo_frente['id']
                detalhes = obter_detalhes_frente_parlamentar(id_frente)

                if detalhes and 'dados' in detalhes:
                    frentes_detalhadas.append(detalhes['dados'])
                else:
                    # Se falhar em obter detalhes, adiciona a informa√ß√£o b√°sica
                    print(f"N√£o foi poss√≠vel obter detalhes para a frente ID {id_frente}. Usando dados b√°sicos.")
                    frentes_detalhadas.append(resumo_frente)

        # Retorna a lista de frentes com detalhes
        return frentes_detalhadas

    except requests.exceptions.RequestException as e:
        print(f"Erro ao buscar a lista de frentes do deputado ID {id_deputado}: {e}")
        return None

  '''

# --- Bloco Principal de Execu√ß√£o ---
if __name__ == "__main__":

    deputados_por_estado = {}
    estados_com_falha = []

    print("--- INICIANDO 1¬™ TENTATIVA DE COLETA ---")
    for sigla in SIGLAS_ESTADOS:
        print(f"Buscando deputados para o estado: {sigla}")
        sucesso, dados_deputados = obter_deputados_por_estado_robusto(sigla)

        if sucesso:
            deputados_por_estado[sigla] = dados_deputados
            print(f"-> ‚úÖ Sucesso! Encontrados {len(dados_deputados)} deputados para {sigla}.")
        else:
            # Se falhou, adiciona a sigla na lista para tentar novamente
            estados_com_falha.append(sigla)
            print(f"-> ‚ö†Ô∏è Falha registrada para {sigla}. Ser√° tentado novamente.")

    # --- L√ìGICA DE NOVAS TENTATIVAS ---
    max_tentativas = 3
    tentativa_atual = 1

    while estados_com_falha and tentativa_atual <= max_tentativas:
        print(f"\n--- INICIANDO TENTATIVA N¬∫ {tentativa_atual + 1} PARA {len(estados_com_falha)} ESTADO(S) PENDENTE(S) ---")
        tempo_de_espera = 10 # segundos
        print(f"Aguardando {tempo_de_espera} segundos antes de continuar...")
        time.sleep(tempo_de_espera)

        proximas_falhas = [] # Lista para armazenar falhas desta nova rodada

        for sigla in estados_com_falha:
            print(f"Tentando novamente para o estado: {sigla}")
            sucesso, dados_deputados = obter_deputados_por_estado_robusto(sigla)

            if sucesso:
                deputados_por_estado[sigla] = dados_deputados
                print(f"-> ‚úÖ Sucesso! Encontrados {len(dados_deputados)} deputados para {sigla}.")
            else:
                proximas_falhas.append(sigla) # Se falhar de novo, vai para a pr√≥xima lista de falhas
                print(f"-> ‚ö†Ô∏è Falha persistiu para {sigla}.")

        # Atualiza a lista de estados com falha para a pr√≥xima itera√ß√£o
        estados_com_falha = proximas_falhas
        tentativa_atual += 1

    # --- Relat√≥rio Final ---
    print("\n--- COLETA DE DADOS FINALIZADA ---")
    if deputados_por_estado:
        caminho_arquivo = "deputados_por_estado.json"
        with open(caminho_arquivo, "w", encoding="utf-8") as f:
            json.dump(deputados_por_estado, f, ensure_ascii=False, indent=2)
        print(f"‚úÖ Dados de {len(deputados_por_estado)} estados salvos com sucesso em '{caminho_arquivo}'")

    if estados_com_falha:
        print(f"üö® ATEN√á√ÉO: N√£o foi poss√≠vel obter dados para os seguintes estados ap√≥s todas as tentativas: {estados_com_falha}")
    else:
        print("üéâ Todos os dados foram coletados com sucesso!")

    # --- Cria√ß√£o do DataFrame a partir da lista consolidada de deputados ---
    all_deputies_list = []
    for uf, deputies in deputados_por_estado.items():
        for deputy in deputies:
            deputy['siglaUf'] = uf  # Adiciona a sigla da UF ao dicion√°rio do deputado
            all_deputies_list.append(deputy)

    df_deputados = pd.DataFrame(all_deputies_list)

df_deputados

import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.io as pio


# --- Contagem e Prepara√ß√£o dos Dados ---
# Conta o total de deputados por UF
contagem_por_uf = df_deputados['siglaUf'].value_counts().reset_index()
contagem_por_uf.columns = ['UF', 'Total']
contagem_por_uf = contagem_por_uf.sort_values('Total', ascending=False) # Ordena do maior para o menor

# Conta o total de deputados por Partido
contagem_por_partido = df_deputados['siglaPartido'].value_counts().reset_index()
contagem_por_partido.columns = ['Partido', 'Total']
contagem_por_partido = contagem_por_partido.sort_values('Total', ascending=False) # Ordena do maior para o menor

# --- Cria√ß√£o dos Gr√°ficos Lado a Lado ---
# 1. Inicializa a figura com 1 linha e 2 colunas
fig = make_subplots(
    rows=1, cols=2,
    subplot_titles=('Total de Deputados por Estado', 'Total de Deputados por Partido')
)

# 2. Adiciona o primeiro gr√°fico (por UF) √† coluna 1
fig.add_trace(
    go.Bar(
        y=contagem_por_uf['UF'],
        x=contagem_por_uf['Total'],
        orientation='h', # Define a orienta√ß√£o como horizontal
        text=contagem_por_uf['Total']
    ),
    row=1, col=1
)

# 3. Adiciona o segundo gr√°fico (por Partido) √† coluna 2
fig.add_trace(
    go.Bar(
        y=contagem_por_partido['Partido'],
        x=contagem_por_partido['Total'],
        orientation='h', # Define a orienta√ß√£o como horizontal
        text=contagem_por_partido['Total']
    ),
    row=1, col=2
)

# 4. Atualiza o layout geral e os eixos
fig.update_layout(
    title_text='An√°lise de Deputados Federais por Estado e Partido',
    title_x=0.5,
    showlegend=False,
    height=800,  # Aumenta a altura para melhor visualiza√ß√£o dos partidos
    width=1400
)

# Ordena as barras do maior para o menor (de cima para baixo)
fig.update_yaxes(categoryorder='total ascending', row=1, col=1)
fig.update_yaxes(categoryorder='total ascending', row=1, col=2)

# Adiciona t√≠tulos aos eixos X
fig.update_xaxes(title_text="N√∫mero de Deputados", row=1, col=1)
fig.update_xaxes(title_text="N√∫mero de Deputados", row=1, col=2)

fig.show()

print(obter_detalhes_deputado(220557))

def formatar_perfil_completo_html(detalhes, profissoes=None, ocupacoes=None, mandatos=None, frentes=None):
    """
    Recebe todos os dados de um deputado e retorna uma string HTML formatada
    como um "card de perfil" completo e profissional.
    """
    if not detalhes or not detalhes.get('dados'):
        return "<h3>N√£o foi poss√≠vel obter os detalhes do deputado.</h3>"

    # --- Extra√ß√£o de Dados ---
    dados = detalhes.get('dados', {})
    status = dados.get('ultimoStatus', {})
    gabinete = status.get('gabinete', {})

    # --- Prepara√ß√£o das Vari√°veis ---
    nome_eleitoral = status.get('nomeEleitoral', 'Nome n√£o informado')
    url_foto = status.get('urlFoto', '')
    partido_uf = f"{status.get('siglaPartido', 'N/A')} - {status.get('siglaUf', 'N/A')}"

    # Formata√ß√£o de data
    data_nasc_str = dados.get('dataNascimento')
    data_nasc_formatada = datetime.strptime(data_nasc_str, '%Y-%m-%d').strftime('%d/%m/%Y') if data_nasc_str else "N√£o informada"

    data_status_str = status.get('data')
    data_status_formatada = datetime.strptime(data_status_str, '%Y-%m-%d').strftime('%d/%m/%Y') if data_status_str else "N√£o informada"

    # --- Montagem da String HTML ---
    html_string = f"""
    <style>
        .profile-card {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            border: 1px solid #ddd;
            border-radius: 10px;
            padding: 24px;
            max-width: 800px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            background-color: #fff;
            margin: 20px;
        }}
        .profile-header {{
            display: flex;
            align-items: center;
            border-bottom: 1px solid #eee;
            padding-bottom: 20px;
            margin-bottom: 20px;
        }}
        .profile-header img {{
            width: 110px;
            height: 110px;
            border-radius: 50%;
            margin-right: 24px;
            border: 3px solid #f0f0f0;
        }}
        .profile-header .header-text h2 {{ margin: 0; font-size: 28px; color: #333; }}
        .profile-header .header-text h3 {{ margin: 5px 0 0 0; font-size: 20px; font-weight: 400; color: #666; }}
        .profile-section h4 {{
            margin-top: 24px;
            margin-bottom: 12px;
            font-size: 18px;
            color: #0056b3;
            border-bottom: 2px solid #0056b3;
            padding-bottom: 6px;
        }}
        .profile-section ul {{ list-style-type: none; padding-left: 0; margin: 0; }}
        .profile-section li {{
            font-size: 15px;
            padding: 8px 0;
            border-bottom: 1px solid #f7f7f7;
            display: flex;
        }}
        .profile-section li:last-child {{ border-bottom: none; }}
        .profile-section strong {{ color: #333; width: 180px; flex-shrink: 0; }}
        .social-links a {{ margin-right: 15px; text-decoration: none; color: #007bff; }}
    </style>
    <div class="profile-card">
        <div class="profile-header">
            <img src="{url_foto}" alt="Foto de {nome_eleitoral}">
            <div class="header-text">
                <h2>{nome_eleitoral}</h2>
                <h3>{partido_uf}</h3>
            </div>
        </div>
    """

    # --- Se√ß√£o: Resumo do Mandato ---
    html_string += f"""
        <div class="profile-section">
            <h4>Resumo do Mandato</h4>
            <ul>
                <li><strong>Situa√ß√£o:</strong> {status.get('situacao', 'N√£o informada')}</li>
                <li><strong>Condi√ß√£o Eleitoral:</strong> {status.get('condicaoEleitoral', 'N√£o informada')}</li>
                <li><strong>Legislatura:</strong> {status.get('idLegislatura', 'N√£o informada')}</li>
                <li><strong>Status desde:</strong> {data_status_formatada}</li>
            </ul>
        </div>
    """

    # --- Se√ß√£o: Gabinete e Contatos ---
    redes_sociais_lista = dados.get('redeSocial', [])
    html_string += f"""
        <div class="profile-section">
            <h4>Gabinete e Contatos</h4>
            <ul>
                <li><strong>Localiza√ß√£o:</strong> Pr√©dio {gabinete.get('predio', '?')}, sala {gabinete.get('sala', '?')} ({gabinete.get('andar', '?')}¬∫ andar)</li>
                <li><strong>Telefone:</strong> {gabinete.get('telefone', 'N√£o informado')}</li>
                <li><strong>Email:</strong> {gabinete.get('email', 'N√£o informado')}</li>
    """
    if dados.get('urlWebsite'):
        html_string += f"<li><strong>Website:</strong> <a href='{dados.get('urlWebsite')}' target='_blank'>{dados.get('urlWebsite')}</a></li>"
    if redes_sociais_lista:
        links_html = "".join([f"<a href='{rede}' target='_blank'>{rede.split('/')[-1].title()}</a> " for rede in redes_sociais_lista])
        html_string += f"<li class='social-links'><strong>Redes Sociais:</strong> {links_html}</li>"
    html_string += "</ul></div>"

    # --- Se√ß√£o: Informa√ß√µes Pessoais ---
    html_string += f"""
        <div class="profile-section">
            <h4>Informa√ß√µes Pessoais</h4>
            <ul>
                <li><strong>Nome Civil:</strong> {dados.get('nomeCivil', 'N√£o informado')}</li>
                <li><strong>Data de Nascimento:</strong> {data_nasc_formatada}</li>
                <li><strong>Sexo:</strong> {'Feminino' if dados.get('sexo') == 'F' else 'Masculino'}</li>
                <li><strong>Naturalidade:</strong> {dados.get('municipioNascimento', 'N/A')} - {dados.get('ufNascimento', 'N/A')}</li>
                <li><strong>Escolaridade:</strong> {dados.get('escolaridade', 'N√£o informada')}</li>
    """
    if dados.get('dataFalecimento'):
        html_string += f"<li><strong>Data de Falecimento:</strong> {dados.get('dataFalecimento')}</li>"
    html_string += "</ul></div>"

    # --- Se√ß√£o: Atua√ß√£o Profissional e P√∫blica ---
    if (profissoes and profissoes.get('dados')) or (mandatos and mandatos.get('dados')):
        html_string += """
            <div class="profile-section">
                <h4>Atua√ß√£o Profissional e P√∫blica</h4>
                <ul>
        """
        profissoes_lista = [p['titulo'] for p in profissoes['dados']] if profissoes and profissoes.get('dados') else []
        if profissoes_lista:
            html_string += f"<li><strong>Profiss√µes:</strong> {', '.join(profissoes_lista)}</li>"

        if mandatos and mandatos.get('dados'):
            for m in mandatos['dados']:
                html_string += f"<li><strong>Mandato Anterior:</strong> {m.get('cargo', '')} em {m.get('municipio', '')}/{m.get('uf', '')} ({m.get('anoInicio', '')}-{m.get('anoFim', '')})</li>"
        html_string += "</ul></div>"


    '''
    # --- Se√ß√£o: Atua√ß√£o Parlamentar ---
    if frentes and frentes.get('dados'):
        html_string += """
            <div class="profile-section">
                <h4>Atua√ß√£o Parlamentar</h4>
                <ul>
        """
        frentes_lista = [f['titulo'] for f in frentes['dados']]
        html_string += f"<li><strong>Participa de Frentes:</strong> {len(frentes_lista)} frentes</li>"
        html_string += "</ul></div>"

    html_string += "</div>" # Fecha o card-container
    return html_string

    '''

    return html_string

def exibir_perfil_completo_deputado(id_deputado):
    """
    Busca todos os dados de um deputado e exibe seu perfil formatado.
    """
    print(f"Buscando perfil completo para o deputado ID: {id_deputado}...")

    # 1. Busca todos os dados
    detalhes = obter_detalhes_deputado(id_deputado)
    profissoes = obter_profissoes_deputado(id_deputado)
    ocupacoes = obter_ocupacoes_deputado(id_deputado)
    mandatos = obter_mandatos_externos_deputado(id_deputado)

    if not detalhes:
        print("N√£o foi poss√≠vel continuar, pois os detalhes b√°sicos do deputado n√£o foram encontrados.")
        return

    # 2. Formata e exibe o perfil usando a nova fun√ß√£o
    perfil_html = formatar_perfil_completo_html(detalhes, profissoes, ocupacoes, mandatos)
    display(HTML(perfil_html))
    print("Busca finalizada.")

# --- Exemplo Final ---
id_deputado_exemplo = 220559
exibir_perfil_completo_deputado(id_deputado_exemplo)

